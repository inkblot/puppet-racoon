<%-
remote_defaults = {
    'mode' => 'main',
    'my_identifier' => { 'type' => 'address', 'value' => @local_gateway },
    'passive' => false,
    'initial_contact' => true,
    'proposal_check' => 'strict',
    'dpd_delay' => 20,
    'associations' => []
}
sainfo_defaults = {
    'type' => 'anonymous',
    'dh_group' => 'modp1024',
    'encryption_algorithm' => 'aes 256',
    'authentication_algorithm' => 'hmac_sha1',
    'compression_algorithm' => 'deflate'
}
-%>
#
# NOTE: This file will not be used if you use racoon-tool(8) to manage your
# IPsec connections. racoon-tool will process racoon-tool.conf(5) and
# generate a configuration (/var/lib/racoon/racoon.conf) and use it, instead
# of this file.
#
# Simple racoon.conf
# 
#
# Please look in /usr/share/doc/racoon/examples for
# examples that come with the source.
#
# Please read racoon.conf(5) for details, and alsoread setkey(8).
#
#
# Also read the Linux IPSEC Howto up at 
# http://www.ipsec-howto.org/t1.html 
#
log <%= @log_level %>;
path pre_shared_key "/etc/racoon/psk.txt";
path certificate "/etc/racoon/certs";
<% @remotes.each do |remote, given_params|
    params = remote_defaults.merge(given_params) -%>

# <%= remote %>
remote <%= params['address'] %> {
	exchange_mode <%= params['mode'] %>;

	my_identifier <%= params['my_identifier']['type'] %> <%= params['my_identifier']['value'] %>;
    <%- unless params['peers_identifier'].nil? -%>
	peers_identifier <%= params['peers_identifier']['type'] %> <%= params['peers_identifier']['value'] %>;
    <%- end -%>

	generate_policy <%= params['generate_policy'] ? 'on' : 'off' %>;
	passive <%= params['passive'] ? 'on' : 'off' %>;
	initial_contact <%= params['initial_contact'] ? 'on' : 'off' %>;
	nat_traversal <%= params['nat_traversal'] ? 'on' : 'off' %>;
	proposal_check <%= params['proposal_check'] %>;

	dpd_delay <%= params['dpd_delay'] %>;
    <%- unless params['lifetime'].nil? -%>
	lifetime <%= params['lifetime'] %>;
    <%- end -%>
	proposal {
		encryption_algorithm <%= params['proposal']['encryption_algorithm'] %>;
		hash_algorithm <%= params['proposal']['hash_algorithm'] %>;
		authentication_method pre_shared_key;
		dh_group <%= params['proposal']['dh_group'] %>;
	}
}
    <%- params['associations'].each do |assoc, given_params|
            assoc_params = sainfo_defaults.merge(given_params)
            lproto = assoc_params['local_proto'] || 'any'
            rproto = assoc_params['remote_proto'] || 'any'
            case assoc_params['type']
                when 'anonymous'
                    sainfos = ['anonymous']
                when 'identifiers'
                    sainfos = []
                    Array(assoc_params['local_net']).each do |lnet|
                        Array(assoc_params['remote_net']).each do |rnet|
                            spec = "address #{lnet} #{lproto} address #{rnet} #{rproto}"
                            spec = "#{spec} from #{params['from']}" if params.has_key?('from')
                            sainfos += [spec]
                        end
                    end
            end
            sainfos.each do |spec|
    -%>
# <%= assoc %>
sainfo <%= spec %> {
	encryption_algorithm <%= Array(assoc_params['encryption_algorithm']).join(', ') %>;
	authentication_algorithm <%= Array(assoc_params['authentication_algorithm']).join(', ') %>;
	compression_algorithm <%= assoc_params['compression_algorithm'] %>;
            <%- unless assoc_params['lifetime'].nil? -%>
	lifetime <%= assoc_params['lifetime'] %>;
            <%- end -%>
}
<%-         end
        end
   end
-%>
